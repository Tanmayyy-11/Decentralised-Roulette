// const GAS_PRICE;

  //  var userAccount;
  // console.log(userAccount);
  // myContract.methods.addvalue(2).send();
  // var accountInterval = setInterval(function() {
  //   // Check if account has changed
  //   if (web3.eth.accounts[0] !== userAccount) {
  // userAccount = web3.eth.accounts[0];
  //     // Call some function to update the UI with the new account

  //   }
  // }, 100);

  // return initEventListeners();

// function initEventListeners() {
//   /* listening for events from the smart contract */
//   console.log("HI8");
//   console.log(contract.events.RandomNumber());
//   contract.events['RandomNumber']().on('data', res => {
//     console.log(res);
//     if (res.blockNumber > lastBlockEvent) {
//       /* prevent duplicated events */
//       /* 'random' number generated by the smart contract */
//       console.log(res);
//       const oneRandomNumber = res.args.number.toNumber();
//       /* increment spin counter */
//       wheelSpinCounter += 1;
//       /* get wheel element */
//       var wheel = document.getElementById("wheel");
//       /* reset wheel */
//       wheel.style.transform = "rotate(" + lastPosition + "deg)";
//       /* numbers in the wheel, ordered clockwise */
//       var numbers = [
//         0, 32, 15, 19, 4, 21, 2, 25, 17, 34, 6, 27,
//         13, 36, 11, 30, 8, 23, 10, 5, 24, 16, 33, 1,
//         20, 14, 31, 9, 22, 18, 29, 7, 28, 12, 35, 3, 26
//       ];
//       /* calculate how much do we need to rotate to have the random number chosen */
//       var numberDegree = numbers.indexOf(oneRandomNumber) * 360 / numbers.length;
//       /* add some rounds before to look like it's spinning */
//       var numRoundsBefore = 3 * wheelSpinCounter;
//       /* calculate total degrees we need to rotate */
//       var totalDegrees = (numRoundsBefore * 360) + numberDegree;
//       /* rotate the wheel */
//       document.getElementById("wheel").style.transform = "rotate(-" + totalDegrees + "deg)";
//       /* save position to be able to reset the wheel next time */
//       lastPosition = numberDegree;
//       /* show status on bets after wheel stops */
//       setTimeout(function () {
//         showBetsStatus(oneRandomNumber);
//       }, 2000);
//       lastBlockEvent = res.blockNumber;
//     }
//   })
//   .on('error', error => {
//     console.log("NOOOOO");
//     console.error('Error:', error);
//   });
  
// }

  // console.log(err);

// const options = {
    //   value: BET_AMOUNT,
    //   gas: GAS,
    //   gasPrice: GAS_PRICE
    // };

// gasPrice: GAS_PRICE 

// web3.eth.sendTransaction(transactionParams, (error, transactionHash) => {
    //   if (error) {
    //     console.log("LOOOOOO");
    //     console.error('Error:', error);
    //     // Handle error here
    //   } else {
    //     console.log('Transaction Hash:', transactionHash);
    //     // Transaction successful
    //     // Do additional processing or handle success here
    //   }
    // });
    // Send the transaction with the specified value
    // contract.methods.bet(bet.value, bet.type).send(transactionParams, (error, transactionHash) => {
    //     if (error) {
    //       console.error('Error:', error);
    //       // Handle error here
    //     } else {
    //       console.log('Transaction Hash:', transactionHash);
    //       // Transaction successful
    //       // const delayInSeconds = 6; // Set the desired delay time in seconds

    //       // setTimeout(() => {
    //       //   contract.methods.bet(bet.value, bet.type /*, options*/ ).call(
    //       //     (err, res) => {
    //       //       if (err) {
    //       //         console.log(err);
    //       //         return void showError('not enough money in the bank', err);
    //       //       }
    //       //       pushBet(bet);
    //       //     });
    //       // }, delayInSeconds*1000);
    //     }});
    //   contract.methods.bet(bet.value, bet.type /*, options*/ ).call(
    //     (err, res) => {
    //       if (err) {
    //         console.log(err);
    //         return void showError('not enough money in the bank', err);
    //       }
    //       pushBet(bet);
    //     });

    // contract.methods.bet(bet.value, bet.type).call(
        //   (err, res) => {
        //     if (err) {
        //       console.log(err);
        //       return void showError('not enough money', err);
        //     }

      // console.log(contract.methods.getStatus2().call());
  // console.log(contract.methods.getStatus().call());

  // console.log(userAccount);

  //   }
        // )

        // $("#txStatus").text(error);
  // gasPrice: GAS_PRICE
  // if (res.blockNumber > lastBlockEvent) {
      /* prevent duplicated events */
      /* 'random' number generated by the smart contract */
      // const oneRandomNumber = res;
      // /* increment spin counter */
      // wheelSpinCounter += 1;
      // /* get wheel element */
      // var wheel = document.getElementById("wheel");
      // /* reset wheel */
      // wheel.style.transform = "rotate(" + lastPosition + "deg)";
      // /* numbers in the wheel, ordered clockwise */
      // var numbers = [
      //   0, 32, 15, 19, 4, 21, 2, 25, 17, 34, 6, 27,
      //   13, 36, 11, 30, 8, 23, 10, 5, 24, 16, 33, 1,
      //   20, 14, 31, 9, 22, 18, 29, 7, 28, 12, 35, 3, 26
      // ];
      // /* calculate how much do we need to rotate to have the random number chosen */
      // var numberDegree = numbers.indexOf(oneRandomNumber) * 360 / numbers.length;
      // /* add some rounds before to look like it's spinning */
      // var numRoundsBefore = 3 * wheelSpinCounter;
      // /* calculate total degrees we need to rotate */
      // var totalDegrees = (numRoundsBefore * 360) + numberDegree;
      // /* rotate the wheel */
      // document.getElementById("wheel").style.transform = "rotate(-" + totalDegrees + "deg)";
      // /* save position to be able to reset the wheel next time */
      // lastPosition = numberDegree;
      // /* show status on bets after wheel stops */
      // setTimeout(function () {
      //   showBetsStatus(oneRandomNumber);
      // }, 2000);
      // // lastBlockEvent = res.blockNumber;
    // }
        // return initEventListeners();
        //   }
        // )

        // $("#txStatus").text(error);
// conso.log("HI11");
        // console.log("Wheel spinned!");

         // contract.methods.spinWheel(
  //   //   {
  //   //   value: 0,
  //   //   gas: GAS,
  //   //   gasPrice: GAS_PRICE
  //   // }
  // ).call((err, res) => {
  //   if (err) return void showError('to soon to play?', err);
  //   console.log("Wheel Spinned!");
  //   firstBetAfterSpin = true;
  // });

  // gasPrice: GAS_PRICE 

   // console.log("NOOO");
        // $("#txStatus").text(error);

  // contract.cashOut({
  //   value: 0,
  //   gas: GAS,
  //   gasPrice: GAS_PRICE
  // }, (err, res) => {
  //   if (err) return void showError('something went wrong with cashOut', err);
  // });

  // return bigNum;

  // console.log(contract.abi[0]);
  // contract.methods.getStatus().send({ gas: 200000 });

  // .then((err,res) => {
    // console.log("HI6");
    // console.log(res[0]);
    // console.log(res);
    // if (err) return void showError('something went wrong with getStatus', err);
    // let aux = res.map(x => x.toNumber());

    // web3.eth.getBalance(adminAccount)
  //   .then(balance => {
  //     // console.log('Balance:', web3.utils.fromWei(balance, 'ether'), 'ETH');
  //     updateHTML(balance, 'balance');
  //   })
  //   .catch(error => {
  //     console.error('Error:', error);
  //   });

      // console.log('Balance:', web3.utils.fromWei(balance, 'ether'), 'ETH');
// console.log("HI7");
  // });

    // console.log(contract);
  // console.log("HI");
  // init();
  // console.log("HI");
    console.log("HI9");
 //console.log("HI10");
        //console.log("bet completed");
    console.log(res);


